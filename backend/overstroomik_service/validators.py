import logging
from html import escape
from pydantic.class_validators import Validator

from .auto_models import Data, FloodType, ProbabilityOfFlooding, Location


def validate_maximum_water_depth(cls, value):
    """Return 0.0 for waterdepth in case of invalid values.

    Invalid values are:
    - everything lower than 0.01m (including -9999, -inf)
    - everything above 50m as it's unrealistic (including inf)
    """
    # in the case that the value is a "100.0" we won't catch it
    if isinstance(value, (float, int)):
        if value < 0.01:
            value = 0.0

        elif value > 50.0:
            value = 0.0

    return value


def validator_probability_of_flooding(cls, value):

    # No action as the enum parse is passed
    if isinstance(value, ProbabilityOfFlooding):
        return value
    else:
        try:
            return ProbabilityOfFlooding(str(value).lower())
        except ValueError:
            logging.exception(f"Failed converting {value} into ProbabilityOfFlooding")
            return None


def validator_flood_type(cls, value):
    # TODO Make this generic based on the field type in cls
    # No action as the enum parse is passed
    if isinstance(value, FloodType):
        return value
    else:
        try:
            return FloodType(str(value).lower())
        except ValueError:
            logging.exception(f"Failed converting {value} into FloodType")
            return None


def validate_search_string(cls, value):
    """Strip search_field for evil chars used in XSS/SQL injection."""
    return escape(value, quote=True) if value is not None else value


# We monkey patch the fields of the autogenerated models here
# as otherwise the validators will be overwritten
Data.__fields__["maximum_water_depth"].class_validators = {
    "maximum_water_depth": Validator(validate_maximum_water_depth, pre=True)
}
Data.__fields__["maximum_water_depth"].populate_validators()

Data.__fields__["probability_of_flooding"].class_validators = {
    "probability_of_flooding": Validator(validator_probability_of_flooding, pre=True)
}
Data.__fields__["probability_of_flooding"].populate_validators()

Data.__fields__["flood_type"].class_validators = {
    "flood_type": Validator(validator_flood_type, pre=True)
}
Data.__fields__["flood_type"].populate_validators()
Location.__fields__["search_field"].class_validators = {
    "search_field": Validator(validate_search_string, pre=True)
}
Location.__fields__["search_field"].populate_validators()
