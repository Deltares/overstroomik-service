from .auto_models import Data, ProbabilityOfFlooding, ProbabilityOfFlooding, FloodType
from pydantic.class_validators import Validator, validator


@classmethod
def validator_maximum_water_depth(cls, value):
    """Return 0.0 for waterdepth in case of invalid values.

    Invalid values are:
    - everything lower than 0.01m (including -9999, -inf)
    - everything above 50m as it's unrealistic (including inf)
    """
    if value < 0.01:
        value = 0.0

    elif value > 50.0:
        value = 0.0

    return value


@classmethod
def validator_probability_of_flooding(cls, value):

    # No action as the enum parse is passed
    if isinstance(value, ProbabilityOfFlooding):
        return value
    else:
        try:
            return ProbabilityOfFlooding(value)
        except ValueError:
            return None


@classmethod
def validator_flood_type(cls, value):
    # TODO Make this generic based on the field type in cls
    # No action as the enum parse is passed
    if isinstance(value, FloodType):
        return value
    else:
        try:
            return FloodType(value)
        except ValueError:
            return None


Data.validator_flood_type = validator_flood_type
Data.validator_probability_of_flooding = validator_probability_of_flooding
Data.validator_maximum_water_depth = validator_maximum_water_depth


Data.validator_maximum_water_depth = validator("maximum_water_depth")(
    validator_maximum_water_depth
)

# Validators can't be autogenerated, so we add them here
# Data.__validators__ = {
#     "maximum_water_depth": [
#         Validator(func=validator_maximum_water_depth.__func__, pre=True)
#     ],
#     "probability_of_flooding": [
#         Validator(func=validator_probability_of_flooding.__func__, pre=True)
#     ],
#     "flood_type": [Validator(func=validator_flood_type.__func__, pre=True)],
# }
